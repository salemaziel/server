#!/usr/bin/env bash

if [[ -z $(which asdf) ]]; then
	echo "z means doesn't exist"
else
	echo "z means does exist"
fi

#   Table 7-1. Primary expressions

# [ -a FILE ]	True if FILE exists.
# [ -b FILE ]	True if FILE exists and is a block-special file.
# [ -c FILE ]	True if FILE exists and is a character-special file.
# [ -d FILE ]	True if FILE exists and is a directory.
# [ -e FILE ]	True if FILE exists.
# [ -f FILE ]	True if FILE exists and is a regular file.
# [ -g FILE ]	True if FILE exists and its SGID bit is set.
# [ -h FILE ]	True if FILE exists and is a symbolic link.
# [ -k FILE ]	True if FILE exists and its sticky bit is set.
# [ -p FILE ]	True if FILE exists and is a named pipe (FIFO).
# [ -r FILE ]	True if FILE exists and is readable.
# [ -s FILE ]	True if FILE exists and has a size greater than zero.
# [ -t FD ]	True if file descriptor FD is open and refers to a terminal.
# [ -u FILE ]	True if FILE exists and its SUID (set user ID) bit is set.
# [ -w FILE ]	True if FILE exists and is writable.
# [ -x FILE ]	True if FILE exists and is executable.
# [ -O FILE ]	True if FILE exists and is owned by the effective user ID.
# [ -G FILE ]	True if FILE exists and is owned by the effective group ID.
# [ -L FILE ]	True if FILE exists and is a symbolic link.
# [ -N FILE ]	True if FILE exists and has been modified since it was last read.
# [ -S FILE ]	True if FILE exists and is a socket.
# [ FILE1 -nt FILE2 ]	True if FILE1 has been changed more recently than FILE2, or if FILE1 exists and FILE2 does not.
# [ FILE1 -ot FILE2 ]	True if FILE1 is older than FILE2, or is FILE2 exists and FILE1 does not.
# [ FILE1 -ef FILE2 ]	True if FILE1 and FILE2 refer to the same device and inode numbers.
# [ -o OPTIONNAME ]	True if shell option "OPTIONNAME" is enabled.
# [ -z STRING ]	True of the length if "STRING" is zero.
# [ -n STRING ] or [ STRING ]	True if the length of "STRING" is non-zero.
# [ STRING1 == STRING2 ]	True if the strings are equal. "=" may be used instead of "==" for strict POSIX compliance.
# [ STRING1 != STRING2 ]	True if the strings are not equal.
# [ STRING1 < STRING2 ]	True if "STRING1" sorts before "STRING2" lexicographically in the current locale.
# [ STRING1 > STRING2 ]	True if "STRING1" sorts after "STRING2" lexicographically in the current locale.
# [ ARG1 OP ARG2 ]	"OP" is one of -eq, -ne, -lt, -le, -gt or -ge. These arithmetic binary operators return true if "ARG1" is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to "ARG2", respectively. "ARG1" and "ARG2" are integers.
# Expressions may be combined using the following operators, listed in decreasing order of precedence:

# Table 7-2. Combining expressions

# Operation	Effect
# [ ! EXPR ]	True if EXPR is false.
# [ ( EXPR ) ]	Returns the value of EXPR. This may be used to override the normal precedence of operators.
# [ EXPR1 -a EXPR2 ]	True if both EXPR1 and EXPR2 are true.
# [ EXPR1 -o EXPR2 ]	True if either EXPR1 or EXPR2 is true.
# The [ (or test) built-in evaluates conditional expressions using a set of rules based on the number of arguments. More information about this subject can be found in the Bash documentation. Just like the if is closed with fi, the opening square bracket should be closed after the conditions have been listed.


The if command in bash is a powerful tool for conditional execution of commands. It evaluates a conditional expression and executes a set of commands if the expression is true. Here are some tips and examples for using the if command in bash:

- The basic syntax of the if command is as follows:

  if [ condition ]
  then
      commands
  fi


The condition is evaluated, and if it is true, the commands are executed. The fi keyword marks the end of the if block.

- The condition can be any expression that returns a true or false value. Here are some examples of conditions:


The condition is evaluated, and if it is true, the commands are executed. The fi keyword marks the end of the if block.

- The condition can be any expression that returns a true or false value. Here are some examples of conditions:

  [ -f file.txt ]  # true if file.txt exists and is a regular file
  [ -d dir ]       # true if dir exists and is a directory
  [ $var -eq 42 ]  # true if the value of $var is equal to 42



The test command can also be used instead of the square brackets:

  if test -f file.txt
  then
      echo "file.txt exists"
  fi


- The if command can be combined with other commands to create more complex expressions. For example:

  if [ -f file.txt ] && [ $var -eq 42 ]
  then
      echo "file.txt exists and var is 42"
  fi


This will only execute the echo command if both conditions are true.

- The if command can also be used with the elif and else keywords to create branching logic. For example:


  if [ $var -eq 42 ]
  then
      echo "var is 42"
  elif [ $var -eq 43 ]
  then
      echo "var is 43"
  else
      echo "var is not 42 or 43"
  fi


This will execute the first echo command if $var is 42, the second echo command if $var is 43, and the third echo command if $var is neither 42 nor 43.

- The if command can also be used in a one-liner with the && and || operators. For example:

  [ -f file.txt ] && echo "file.txt exists" || echo "file.txt does not exist"



This will execute the first echo command if file.txt exists, and the second echo command if it does not.


