# Using this file as your sshd_config (/etc/ssh/sshd_config) assumes you have created an sshkey and copied it to your *users* (not roots) $HOME/.ssh/authorized_keys file
# If you restart the service without doing this, you will be locked out.

# Before restarting the service, test with: sshd -t
# Extended test with: sshd -T

## Even if its perfect, you should use this instead, make it a habit:
## sudo kill -SIGHUP $(pgrep -f "sshd -D")

## sshd rereads its configuration file when it receives a hangup 
## signal, SIGHUP, by executing itself with the name and options 
## it was started with, e.g. /usr/sbin/sshd.

## The pgrep -f "sshd -D" part will return only the PID of the 
## sshd daemon process that listens for new connections

## Should also probably Re-generate the RSA and ED25519 keys:
# rm /etc/ssh/ssh_host_*
# ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N ""
# ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ""

## Remove small Diffie-Hellman moduli
# awk '$5 >= 3071' /etc/ssh/moduli > /etc/ssh/moduli.safe
# mv /etc/ssh/moduli.safe /etc/ssh/moduli


## Resource links listed at bottom

## ---------------------------------------------

# Explicitly set ssh protocol 2; this is the default but just in case bcuz protocol 1 has vulnerabilities

Protocol 2

# Protects from misconfiguration
StrictModes yes

## ---------------------------------------------
 
# Supported HostKey algorithms by order of preference.

HostKey /etc/ssh/ssh_host_ed25519_key
HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key

## ---------------------------------------------

# HostKeyAlgorithms

# sshaudit.com recommends the following:
HostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com


## ---------------------------------------------

# KexAlgorithms
# Specifies the available KEX (Key Exchange) algorithms. 

# sshaudit.com recommendedations 
KexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256



# stribika.github.io/2015/01/04/secure-secure-shell.html recommendedations (might be outdated)
#KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512

# Below is from Mozilla's recommendedations. Above is more secure, but make sure your key works so you don't lock yourself out. Use Mozilla's recommendedation if in doubt
# Warning tho, NIST p curces are possibly backdoored by NSA (sshaudit.com)
#KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp25



## ---------------------------------------------

# Ciphers

# Specifies the ciphers allowed (stribika.github.io, Mozilla, and sshaudit.com all recommend the same)
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr


## ---------------------------------------------

# MACs

# Specifies the available MAC (message authentication code) algorithms (stribika.github.io)
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com

# sshaudit.com recommendedations 
#MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com

## ---------------------------------------------

# Address & Port Binding

# Specifies the available authentication methods.
# Port MUST come before listen address.
Port 22

# Specifies the address to listen on.
#ListenAddress 0.0.0.0

## ---------------------------------------------

# Authentication

PermitRootLogin no
PermitEmptyPasswords no
PasswordAuthentication no
ChallengeResponseAuthentication no

# Set this to yes to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to no.
UsePAM no

AuthenticationMethods publickey
PubkeyAuthentication yes

## Expect .ssh/authorized_keys2 to be disregarded by default in future.
AuthorizedKeysFile	.ssh/authorized_keys .ssh/authorized_keys2

## Dont read the users ~/.rhosts and ~/.shosts files
IgnoreRhosts yes

## For this to work when set to yes, will also need host keys in /etc/ssh/ssh_known_hosts
## More secure to leave it disabled tho
HostbasedAuthentication no


MaxAuthTries 5
MaxSessions 2
MaxStartups 2 

## ---------------------------------------------

# Checks every 300 seconds, twice. If the user is idle for 600 seconds(10 minutes), disconnects.
ClientAliveInterval 300
ClientAliveCountMax 2


# Specifies whether the system should send TCP keepalive messages to the
# other side. If they are sent, death of the connection or crash of one of
# the machines will be properly noticed.  This means that
# connections will die if the route is down temporarily
#
# The default is "yes" (to send TCP keepalive messages); client
# will notice if network goes down or the remote host dies. This is
# important in scripts, and many users want it too.
#
TCPKeepAlive no

## ---------------------------------------------

# Forwarding

PermitTunnel no
X11Forwarding no
AllowAgentForwarding no
AllowTcpForwarding no
AllowStreamLocalForwarding no
GatewayPorts no   
DisableForwarding yes


Compression no

## Allow client to pass locale environment variables
AcceptEnv LANG LC_*

## ---------------------------------------------

## Override default of no subsystems
#Subsystem	sftp	/usr/lib/openssh/sftp-server

# Override default of no subsystems, while Logging sftp access
Subsystem sftp  /usr/lib/ssh/sftp-server -f AUTHPRIV -l INFO

## ---------------------------------------------

## Logging
SyslogFacility AUTH
LogLevel VERBOSE
PrintLastLog yes


## ---------------------------------------------


# Don't resolve hostnames; quickens login
UseDNS no




## To receive emails** upon ssh logins getting root access,
## enter the following in /root/.bashrc , replacing 
## ServerName and your@email.com with your own:
## **Must have mailx package installed

# echo "ALERT - Root Shell Access (ServerName) on:" `date` `who` | mail -s "Alert: Root Access from `who | cut -d"(" -f2 | cut -d")" -f1`" your@email.com




#### UNUSED OR DEFAULTS FROM SYSTEM  ###

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody


## Change to yes if you dont trust ~/.ssh/known_hosts for
## HostbasedAuthentication
#IgnoreUserKnownHosts no


## Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no

## GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes
#GSSAPIStrictAcceptorCheck yes
#GSSAPIKeyExchange no

#GatewayPorts no
#X11DisplayOffset 10
#X11UseLocalhost yes
#PermitTTY yes
#PrintMotd no
#PrintLastLog yes

## Add your users or groups here
## Ex. 
#AllowUsers user1 user2 user3
#AllowGroups group1 staff mybackups

#AllowUsers
#AllowGroups

#PermitUserEnvironment no

#ClientAliveInterval 0
#UseDNS no
#PidFile /var/run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
#Banner none

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server



####   SOURCES:  #####
## https://securitytrails.com/blog/mitigating-ssh-based-attacks-top-15-best-security-practices

## https://askubuntu.com/questions/462968/take-changes-in-file-sshd-config-file-without-server-reboot

## https://stribika.github.io/2015/01/04/secure-secure-shell.html

## https://www.ssh-audit.com/hardening_guides.html

